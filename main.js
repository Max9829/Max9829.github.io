import React, { useState, useEffect } from 'react';

// Главный компонент приложения
function App() {
  // Состояние для отслеживания текущей активной страницы/раздела
  // 'home' - главная страница, 'assembler' - раздел Ассемблер, 'c' - раздел C
  const [currentPage, setCurrentPage] = useState('home');
  // Состояние для отслеживания активной главы в выбранном языке
  // Сохраняет ID главы или null, если глава не выбрана
  const [activeChapter, setActiveChapter] = useState(null);
  // Состояние для хранения текста активной главы
  const [chapterText, setChapterText] = useState('');

  // Данные для разделов и глав сайта
  // Эта структура позволяет легко добавлять новые языки и главы
  const siteContent = {
    assembler: {
      title: 'Ассемблер NASM', // Изменено название
      description: 'Изучите основы низкоуровневого программирования.',
      chapters: [
        {
          id: 'asm-intro',
          title: 'Введение в Ассемблер',
          content: 'Ассемблер - это низкоуровневый язык программирования, который напрямую взаимодействует с архитектурой процессора. Он использует мнемонические коды для представления машинных инструкций, что делает его более читаемым, чем чистый машинный код, но гораздо менее абстрактным, чем высокоуровневые языки вроде C или Python. Программы на Ассемблере транслируются в машинный код с помощью специальной программы-ассемблера. Знание Ассемблера позволяет глубоко понимать, как работают компьютеры, оптимизировать код для максимальной производительности, разрабатывать системное программное обеспечение, драйверы устройств и встроенные системы.  Несмотря на свою сложность и крутую кривую обучения, Ассемблер остается незаменимым инструментом в определенных областях компьютерной науки и инженерии.'
        },
        {
          id: 'asm-registers',
          title: 'Регистры процессора',
          content: 'Регистры процессора - это небольшие, высокоскоростные хранилища данных, расположенные непосредственно внутри центрального процессора (ЦП). Они используются для временного хранения данных, которые активно обрабатываются или будут использоваться в ближайшее время. Регистры являются самой быстрой формой памяти, доступной для ЦП, и их эффективное использование критически важно для производительности программы.  Различные архитектуры ЦП (например, x86, ARM) имеют свой собственный набор регистров с уникальными названиями и назначениями. Например, в архитектуре x86 существуют универсальные регистры (AX, BX, CX, DX), указатели (SP, BP, IP), индексные регистры (SI, DI) и сегментные регистры (CS, DS, SS, ES, FS, GS). Понимание их функций и умение манипулировать ими напрямую в Ассемблере позволяет писать чрезвычайно эффективный и точный код, который непосредственно управляет поведением оборудования.'
        },
        {
          id: 'asm-instructions',
          title: 'Основные инструкции',
          content: 'В Ассемблере каждая инструкция соответствует одной или нескольким машинным операциям. Основные инструкции включают операции перемещения данных (например, `MOV` для копирования данных между регистрами или памятью), арифметические операции (`ADD`, `SUB`, `MUL`, `DIV` для сложения, вычитания, умножения, деления), логические операции (`AND`, `OR`, `XOR`, `NOT` для побитовых логических операций), операции сравнения (`CMP` для сравнения значений), инструкции управления потоком (`JMP` для безусловного перехода, `JE`, `JNE`, `JL` для условных переходов на основе флагов состояния, `CALL` и `RET` для вызовов функций и возвратов).  Каждая инструкция имеет специфический синтаксис, который обычно включает мнемонический код операции и операнды (регистры, константы или адреса памяти).  Эффективное комбинирование этих базовых инструкций позволяет создавать сложные алгоритмы и программы, которые напрямую управляют аппаратным обеспечением, используя его в полной мере.'
        },
      ],
    },
    c: {
      title: 'C', // Изменено название
      description: 'Мощный и эффективный язык для системного программирования.',
      chapters: [
        {
          id: 'c-intro',
          title: 'Введение в C',
          content: 'C - это процедурный, компилируемый язык программирования общего назначения, разработанный Деннисом Ритчи в Bell Labs в начале 1970-х годов. Он является одним из самых влиятельных языков в истории компьютерной науки и послужил основой для многих других языков, таких как C++, Java, C# и JavaScript.  C известен своей эффективностью, гибкостью и близким к аппаратному обеспечению доступом, что делает его идеальным для системного программирования (операционные системы, драйверы устройств), встроенных систем, высокопроизводительных вычислений и разработки игр. Несмотря на то что C не имеет встроенной поддержки объектно-ориентированного программирования или автоматического управления памятью (сборки мусора), его мощь и контроль над системными ресурсами делают его незаменимым инструментом для разработчиков, которым требуется максимальная производительность и точный контроль.'
        },
        {
          id: 'c-datatypes',
          title: 'Типы данных и переменные',
          content: 'В языке C каждая переменная должна быть объявлена с определенным типом данных, который определяет тип значений, которые она может хранить, и объем памяти, который она будет занимать.  Основные встроенные типы данных в C включают: `int` (целые числа), `float` (числа с плавающей запятой одинарной точности), `double` (числа с плавающей запятой двойной точности) и `char` (символы).  Существуют также модификаторы типа, такие как `short`, `long`, `signed` и `unsigned`, которые могут изменять диапазон или размер базовых типов.  Переменные объявляются с использованием синтаксиса `тип_данных имя_переменной;` (например, `int age;`).  Понимание и правильное использование типов данных критически важны для написания корректного и эффективного кода на C, поскольку они напрямую влияют на использование памяти и точность вычислений.'
        },
        {
          id: 'c-pointers',
          title: 'Указатели в C',
          content: 'Указатели - это одна из самых мощных и в то же время сложных концепций в языке C. Указатель - это переменная, которая хранит адрес памяти другой переменной. Вместо того чтобы хранить значение напрямую, указатель "указывает" на место в памяти, где это значение находится.  Объявление указателя осуществляется с помощью звездочки (`*`): `тип_данных *имя_указателя;` (например, `int *ptr;`).  Оператор `&` (оператор "адрес") используется для получения адреса переменной (например, `ptr = &my_variable;`).  Оператор `*` (оператор "разыменование") используется для доступа к значению, хранящемуся по адресу, на который указывает указатель (например, `*ptr = 10;`).  Указатели широко используются в C для эффективной работы с массивами, динамическим распределением памяти (с помощью `malloc` и `free`), передачей аргументов по ссылке в функции и созданием сложных структур данных, таких как связанные списки и деревья.  Хотя они предоставляют низкоуровневый контроль, некорректное использование указателей может привести к серьезным ошибкам, таким как сегментационные нарушения.'
        },
      ],
    },
  };

  // Эффект для загрузки текста главы при изменении activeChapter
  useEffect(() => {
    if (activeChapter) {
      // Ищем главу во всех языках
      let foundChapter = null;
      for (const langKey in siteContent) {
        foundChapter = siteContent[langKey].chapters.find(
          (chap) => chap.id === activeChapter
        );
        if (foundChapter) {
          break; // Глава найдена, выходим из цикла
        }
      }
      setChapterText(foundChapter ? foundChapter.content : 'Содержимое главы не найдено.');
    } else {
      setChapterText(''); // Очищаем текст главы, если глава не выбрана
    }
  }, [activeChapter, siteContent]); // Зависимости эффекта: activeChapter и siteContent

  // Обработчик нажатия на навигационное меню
  const handleNavClick = (page) => {
    setCurrentPage(page); // Устанавливаем новую текущую страницу
    setActiveChapter(null); // Сбрасываем выбранную главу при смене страницы
    setChapterText(''); // Очищаем текст главы
  };

  // Обработчик нажатия на блок языка (Ассемблер/C)
  const handleLanguageBlockClick = (language) => {
    setCurrentPage(language); // Переходим на страницу выбранного языка
    setActiveChapter(null); // Сбрасываем выбранную главу
    setChapterText(''); // Очищаем текст главы
  };

  // Обработчик нажатия на главу
  const handleChapterClick = (chapterId) => {
    setActiveChapter(chapterId); // Устанавливаем выбранную главу
  };

  // Вспомогательная функция для рендеринга содержимого страниц
  const renderContent = () => {
    if (currentPage === 'home') {
      return (
        // Общий контейнер для центрирования блоков и ограничения их ширины
        // max-w-4xl ограничивает общую ширину, mx-auto центрирует его
        // flex-col на мобильных, md:flex-row на больших экранах, justify-center для горизонтального центрирования
        // items-stretch позволяет блокам растягиваться по высоте
        <div className="max-w-4xl mx-auto flex flex-col md:flex-row justify-center items-stretch gap-8">
          {/* Блок для Ассемблера */}
          <div
            className="bg-gray-800 p-6 rounded-lg shadow-md cursor-pointer hover:bg-gray-700 transition-colors duration-300
                       flex flex-col items-center justify-center text-center py-16 px-8 max-w-sm w-full"
            onClick={() => handleLanguageBlockClick('assembler')}
          >
            {/* Иконка для Ассемблера (шестеренка) */}
            <svg
              className="w-16 h-16 mb-4 text-orange-400" // Изменен цвет
              fill="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path d="M12 21.35c-3.14 0-5.7-2.56-5.7-5.7 0-1.42.52-2.73 1.39-3.72l-.76-.76c-.63.92-1.03 2.05-1.03 3.03 0 3.31 2.69 6 6 6s6-2.69 6-6c0-1.27-.47-2.45-1.26-3.34l-.76.76c.87.99 1.39 2.3 1.39 3.72 0 3.14-2.56 5.7-5.7 5.7zm6.65-4.8c-.87.99-1.39 2.3-1.39 3.72 0 3.14 2.56 5.7 5.7 5.7s5.7-2.56 5.7-5.7c0-1.42-.52-2.73-1.39-3.72l.76-.76c.63.92 1.03 2.05 1.03 3.03 0 3.31-2.69 6-6 6s-6-2.69-6-6c0-1.27.47-2.45 1.26-3.34l-.76-.76c-.63.92-1.03 2.05-1.03 3.03 0 3.31 2.69 6 6 6s6-2.69 6-6c0-1.27-.47-2.45-1.26-3.34l-.76-.76c.63.92 1.03 2.05-1.03 3.03 0 3.31 2.69 6 6 6zM12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9-4.03-9-9-9zm0 16c-3.86 0-7-3.14-7-7s3.14-7 7-7 7 3.14 7 7-3.14 7-7 7z" />
              <circle cx="12" cy="12" r="3.5" /> {/* Центральный круг для шестерёнки */}
            </svg>

            <h2 className="text-2xl font-bold mb-2 text-orange-400"> {/* Изменен цвет */}
              {siteContent.assembler.title}
            </h2>
            <p className="text-gray-300">
              {siteContent.assembler.description}
            </p>
          </div>
          {/* Блок для C */}
          <div
            className="bg-gray-800 p-6 rounded-lg shadow-md cursor-pointer hover:bg-gray-700 transition-colors duration-300
                       flex flex-col items-center justify-center text-center py-16 px-8 max-w-sm w-full"
            onClick={() => handleLanguageBlockClick('c')}
          >
            {/* Новая иконка для C (простая буква C в рамке) */}
            <svg
              className="w-16 h-16 mb-4 text-emerald-400" // Изменен цвет
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
              <path d="M10 8c1.66 0 3 1.34 3 3s-1.34 3-3 3H8V8h2zM10 6H8c-1.1 0-2 .9-2 2v6c0 1.1.9 2 2 2h2c2.21 0 4-1.79 4-4s-1.79-4-4-4z"></path>
            </svg>


            <h2 className="text-2xl font-bold mb-2 text-emerald-400"> {/* Изменен цвет */}
              {siteContent.c.title}
            </h2>
            <p className="text-gray-300">
              {siteContent.c.description}
            </p>
          </div>
        </div>
      );
    } else if (siteContent[currentPage]) {
      const currentLanguage = siteContent[currentPage];
      return (
        <div className="flex flex-col md:flex-row gap-8">
          {/* Левая колонка: список глав */}
          <div className="md:w-1/3 bg-gray-800 p-6 rounded-lg shadow-md">
            {/* Изменено название заголовка на "Главы" */}
            <h2 className="text-2xl font-bold mb-4 text-white">
              Главы
            </h2>
            <ul className="space-y-2">
              {currentLanguage.chapters.map((chapter) => (
                <li key={chapter.id}>
                  <button
                    onClick={() => handleChapterClick(chapter.id)}
                    className={`block w-full text-left p-3 rounded-md transition-colors duration-200
                      ${
                        activeChapter === chapter.id
                          ? 'bg-orange-600 text-white shadow-lg' // Изменен цвет
                          : 'bg-gray-700 text-gray-200 hover:bg-gray-600'
                      }`}
                  >
                    {chapter.title}
                  </button>
                </li>
              ))}
            </ul>
          </div>
          {/* Правая колонка: содержимое главы */}
          <div className="md:w-2/3 bg-gray-800 p-6 rounded-lg shadow-md">
            {activeChapter ? (
              <div>
                <h3 className="text-2xl font-bold mb-4 text-white">
                  {currentLanguage.chapters.find((chap) => chap.id === activeChapter)?.title || 'Глава'}
                </h3>
                <p className="text-gray-300 leading-relaxed whitespace-pre-wrap">
                  {chapterText}
                </p>
              </div>
            ) : (
              <p className="text-gray-400 text-lg">
                Выберите главу из списка слева, чтобы прочитать ее содержимое.
              </p>
            )}
          </div>
        </div>
      );
    }
    return null; // Ничего не отображать, если страница не найдена
  };

  return (
    // Главный контейнер приложения, устанавливающий темную тему и шрифт
    <div className="min-h-screen bg-gray-900 text-white font-inter">
      {/* Шапка сайта с навигацией */}
      <header className="bg-gray-800 shadow-lg py-4">
        <nav className="container mx-auto px-4 flex justify-between items-center">
          <h1 className="text-3xl font-extrabold text-yellow-400">Мой Сайт</h1> {/* Изменен цвет */}
          <ul className="flex space-x-6">
            <li>
              <button
                onClick={() => handleNavClick('home')}
                className={`text-lg font-medium hover:text-yellow-300 transition-colors duration-200
                  ${currentPage === 'home' ? 'text-yellow-400' : 'text-gray-300'}`}
              >
                Главная
              </button>
            </li>
            {/* Кнопки Ассемблер и C удалены из верхней навигации */}
          </ul>
        </nav>
      </header>

      {/* Основное содержимое сайта */}
      <main className="container mx-auto p-8 pt-12">
        {renderContent()}
      </main>
    </div>
  );
}

export default App;

